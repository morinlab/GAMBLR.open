---
title: "GAMBLR terms and concepts"
vignette: >
  %\VignetteIndexEntry{quarto vignettes}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
from: markdown+emoji
fig.align: "center"
---

```{r load_libs}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(GAMBLR.open)
```

There are several concepts that often come up when using any of the GAMBLR
packages. In particular, there are a few arguments that are required by most functions and that have a very specific meaning in the context of GAMBLR. This guide will help you understand the importance of these and how they are used across GAMBLR. 

### genome build

GAMBLR functions and the data in GAMBLR.data all support two main genomic coordinate systems. As GAMBL itself and the data bundled and available through this package represents a large collection of samples sequenced both locally and externally, we opted to support only two genome build flavours. For somewhat nuanced reasons, coordinates using `grch37` or `hg38` are supported. `grch37` uses the same numeric coordinate system a NCBI `hg19`, but for the former, chromosome names lack the "chr" prefix. In contrast, the `hg38` genome build is always chr-prefixed and is in the same coordinate system as the `GRCh38` genome build. If you are analyzing your own data in GAMBLR, obviously you will have to know which coordinate system and genome build is appropriate. Generally, you can make any results that correspond to an unsupported genome build (e.g. `hg19` or `GRCh38`) by removing or adding the "chr" prefix to the chromosome name. 

```{r grch37}
# example of grch37 coordinates
head(GAMBLR.data::chromosome_arms_grch37)
```

```{r hg38}
# example of hg38 coordinates
head(GAMBLR.data::chromosome_arms_hg38)
```

### projection

You can think of `projection` as an alias
for genome build that is used in a very specific (and common) context within GAMBLR packages. When you use a function that retrieves some sort of data on a coordinate system, you must tell that function which coordinate system you want. Within GAMBLR.data, there is data available relative to `grch37` or `hg38`. Behind the scenes, results have all been *lifted over* or *projected* to both builds using tools such as `liftOver` or `crossMap`. Hence, we refer to the results relative to any given genome build as a `projection`. 



### metadata

In it's minimal form, this is a data frame with a set of 7 required columns:
`patient_id`, `Tumor_Sample_Barcode`, `sample_id`, `seq_type`, `sex`, `cohort`,
and `pathology`. In reality many of these variables such as patient details (e.g. `sex`, `pathology`), convenience variables such as `cohort` or `study` can contain NA values but those columns must be present in the metadata. The main purpose of this data frame is to provide a structure for the metadata that is used by numerous GAMBLR functions. In general, it
provides linkage between unique sample identifiers and basic metadata fields that are
needed by various functions. Notably, the columns `Tumor_Sample_Barcode` and `sample_id` are expected to be identical. In most cases, `sample_id` is used but the alias `Tumor_Sample_Barcode` is required to be present mostly for ease of linking MAF-type data with the metadata.

Here is an example from GAMBLR.data:

```{r show_metadata}
#| echo: false
#| message: false
get_gambl_metadata() %>% 
  dplyr::select(sample_id,
                Tumor_Sample_Barcode,
                patient_id,
                seq_type,
                pathology,
                cohort,
                sex) %>%
                slice_sample(n=15) %>% 
                kableExtra::kable()

```

If you are analyzing your own data in GAMBLR and don't have detailed metadata, the bare minimum you could get away with is a data frame with dummy values for every required column. Here's an example that assumes you are working entirely with exome (`capture`) data from a collection of Burkitt lymphoma (BL) patients.

```{r dummy_metadata}
actual_ids = c("my_sample1","my_sample2","my_sample3","my_sample_1000")

metadata = data.frame(sample_id=actual_ids,
                      Tumor_Sample_Barcode=actual_ids,
                      patient_id = actual_ids,
                      seq_type = "capture",
                      pathology = "BL",
                      cohort = NA,
                      sex=NA)
metadata %>% kableExtra::kable()
```